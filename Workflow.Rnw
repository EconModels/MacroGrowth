
\documentclass{article}
\usepackage[margin=1in]{geometry}
\usepackage{language} % Obtain language.sty from https://github.com/rpruim/latex
\usepackage{underscore} % Should be part of any LaTeX distribution.

\title{Workflow and Software Documentation}
\author{Heun/Pruim}
\begin{document}

<<setup, include=FALSE>>=
require(knitr)
opts_chunk$set(
  tidy=FALSE
)
source("Econ-Growth-Functions2.R")
@

\maketitle

\section{Resampling Workflow}

Because it takes significant time to generate all the resampling data,
resample data is cached on disk. Model coefficients generated 
from resampled data are stored in files for each country and each model. 
The files are stored in a directory called \texttt{data_resample}.

A reasonable workflow is:
\begin{enumerate}
\item 
<<message=FALSE>>=
source("Econ-Growth-Resampling.R")
@
which, in turn, sources the file named \texttt{Econ-Growth_Functions2.R}.
\item
<<>>=
source("Graphics.R")
@

\item
Execute the function called \function{genAllResampleData()} to cache the resampling data.

A typical call would be 
<<eval=FALSE>>=
genAllResampleData(method="wild", n=100)
@

\item Reload the data using one of the various ``load'' functions
from file \texttt{Econ-Growth-Functions2.R}:

<<eval=FALSE>>=
loadResampleData <- function(modelType, countryAbbrev, energyType, factor)
loadAllResampleData <- function(modelType, energyType, factor)
loadResampleDataRefitsOnly <- function(modelType, countryAbbrev, energyType,  factor)
loadResampleDataBaseFitOnly <- function(modelType, countryAbbrev, energyType, factor)
@

\begin{enumerate}
\item
A typical call for loadAllResampleData would be

<<>>=
head( loadAllResampleData(modelType="cde", energyType="Q"), n=3 )
@


\item
Other examples:
<<>>=
head( loadAllResampleData(model="sf", factor="K"), n=3 )
head( loadAllResampleData(model="linex", energyType = "Q"), n=3 )
head( loadAllResampleData(model="cese", energyType = "Q"), n=3 )
@
\end{enumerate}

\item To find the fraction of resample models that do not converge, say
<<>>=
fracUnconvergedResampleFitsAll()
@

\end{enumerate}

\section{Ternary Plots}
Plots of distributions of coefficients for the Cobb-Douglas-Energy
model can be made with \function{standardTriPlot()} in 
file \texttt{Graphics.R}.  
<<>>=
standardTriPlot( loadAllResampleData(modelType="cde", energyType="Q") ) +
  labs(title="Model = CDE; energy=Q")
@

\section{Scatterplots with two variables}

<<>>=
standardScatterPlot( loadAllResampleData(model="sf", factor="K"), 
                     aes(lambda, m) ) +
  labs(title="Model = sf; factor=K", x=expression(lambda))
@

You can change the order of the countries on the graph 
with the \texttt{countryAbbrevsOrder} argument 
to \texttt{loadAllResampleData}. 
The default order is 
<<>>=
countryAbbrevs
@
However, for the 9-panel graphs, 
I like to plot in the order shown below, 
so that the SA/IR and TZ/ZM pairs 
are adjacent and atop one another, respectively.
The variable 
<<>>=
countryAbbrevsForGraph
@
\noindent in file \texttt{Econ-Growth-Functions2.R} contains the preferred
order for 9-panel graphs, as demonstrated below.
<<>>=
standardScatterPlot( loadAllResampleData(model="linex", energyType = "Q", 
                                         countryAbbrevsOrder=countryAbbrevsForGraph), 
                     aes(a_0, c_t) ) +
  labs(title="Model = linex; energy=Q", x=expression(a[0]), y=expression(c[t]))
@

Note that in the above plot, we have an apparent singularity 
at $a_0 = 0.0$ which drives the $c_t$ axis scale to be very large.
To change the axes on a graph, 

**** Randy: insert an example of fixing the axes here? ****

<<>>=
standardScatterPlot( loadAllResampleData(model="cese", energyType = "Q"), 
                     aes(delta, rho) ) +
  labs(title="Model = cese; energy=Q", x=expression(delta), y=expression(rho))
@
\end{document}