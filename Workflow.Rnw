
\documentclass{article}
\usepackage[margin=1in]{geometry}
\usepackage{language} % Obtain language.sty from https://github.com/rpruim/latex
\usepackage{underscore} % Should be part of any LaTeX distribution.

\title{Workflow and Software Documentation}
\author{Heun/Pruim}
\begin{document}

<<setup, include=FALSE>>=
require(knitr)
opts_chunk$set(
  tidy=FALSE
)
@

\maketitle

\section{Resampling Workflow}

Because it takes significant time to generate all the resampling data,
resample data is cached on disk. Model coefficients generated 
from resampled data are stored in files for each country and each model. 
The files are stored in a directory called \texttt{data_resample}.

A reasonable workflow is:
\begin{enumerate}
\item 
<<message=FALSE>>=
source("Econ-Growth-Resampling.R")
@
which, in turn, sources the file named \texttt{Econ-Growth_Functions2.R}.

\item
Execute the function called \function{genAllResampleData()}.

A typical call would be 
<<eval=FALSE>>=
genAllResampleData(method="wild", n=100)
@
\item Reload the data using one of the various ``load'' functions
from file \texttt{Econ-Growth-Functions2.R}:

<<eval=FALSE>>=
loadResampleData <- function(modelType, countryAbbrev, energyType, factor)
loadAllResampleData <- function(modelType, energyType, factor)
loadResampleDataRefitsOnly <- function(modelType, countryAbbrev, energyType,  factor)
loadResampleDataBaseFitOnly <- function(modelType, countryAbbrev, energyType, factor)
@

\begin{enumerate}
\item
A typical call for loadAllResampleData would be
<<eval=FALSE>>=
loadAllResampleData(modelType="cde", energyType="Q")
@
\item
Another example:
<<>>=
head(loadAllResampleData(model="sf", factor="K"), n=5)
@
\end{enumerate}
\end{enumerate}

\section{Ternary Plots}
\begin{enumerate}
\item
Plots of distributions of coefficients for the Cobb-Douglas 
with energy model can be made with \function{triPlot()} in 
file \texttt{Graphics.R}.  (Goofy labels here just to demonstrate what is possible.)
<<>>=
source("Graphics.R")
resData <- loadAllResampleData(modelType="cde", energyType="Q")
triPlot(subset(resData, method!="orig"), 
        gamma, alpha, beta,
        labels=c("gamma[1]", "alpha[2]", "sqrt(beta[3])"),
        n.grid=5,  aes_string="color=lambda", 
        size=1.7, alpha=.5 ) + 
     geom_point(data=subset(resData, method=="orig"), 
                color="red", alpha=1, size=3) +
     facet_wrap( ~ countryAbbrev ) +
     scale_colour_gradient(expression(lambda), high="navy", low="skyblue") 
@
Eventually, we can build a wrapper that loads the data and builds the plot with our favorite settings.

\section*{Scatterplots with two variables}

<<>>=
ggplot(data=subset(resData, method!="orig"), 
        aes(x=alpha, y=beta, color=lambda)) +
  geom_point() +
  xlab(expression(alpha)) +
  ylab(expression(beta)) +
  geom_point(data=subset(resData, method=="orig"), 
                color="red", alpha=1, size=3) +
  facet_wrap( ~ countryAbbrev ) +
  scale_colour_gradient(expression(lambda), high="navy", low="skyblue")
@
\end{enumerate}

\end{document}